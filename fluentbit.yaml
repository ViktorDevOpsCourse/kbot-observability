apiVersion: apps/v1
kind: Deployment
metadata:
  name: fluentbit-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fluentbit
  template:
    metadata:
      labels:
        app: fluentbit
    spec:
      containers:
        - name: fluentbit
          image: fluent/fluent-bit:latest
          volumeMounts:
            - name: fluentbit-config-volume
              mountPath: /fluent-bit/fluent-bit.conf
              subPath: fluent-bit.conf
            - name: fluentbit-metadata-volume
              mountPath: /fluent-bit/docker-metadata.lua
              subPath: docker-metadata.lua
            - name: host-var
              mountPath: /var
              readOnly: true
            - name: host-proc
              mountPath: /host/proc
              readOnly: true
            - name: host-sys
              mountPath: /host/sys
              readOnly: true
      volumes:
        - name: fluentbit-config-volume
          configMap:
            name: fluentbit-config
        - name: fluentbit-metadata-volume
          configMap:
            name: fluentbit-metadata
        - name: host-var
          hostPath:
            path: /var
        - name: host-proc
          hostPath:
            path: /proc
        - name: host-sys
          hostPath:
            path: /sys

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentbit-metadata
data:
  docker-metadata.lua: |
    DOCKER_VAR_DIR = '/var/lib/docker/containers/'
    DOCKER_CONTAINER_CONFIG_FILE = '/config.v2.json'
    DOCKER_CONTAINER_METADATA = {
      ['docker.container_name'] = '\"Name\":\"/?(.-)\"',
      ['docker.container_image'] = '\"Image\":\"/?(.-)\"',
      ['docker.container_started'] = '\"StartedAt\":\"/?(.-)\"'
    }
    
    cache = {}
    
    -- Gets metadata from config.v2.json file for container
    function get_container_metadata_from_disk(container_id)
      local docker_config_file = DOCKER_VAR_DIR .. container_id .. DOCKER_CONTAINER_CONFIG_FILE
      fl = io.open(docker_config_file, 'r')
    
      if fl == nil then
        return nil
      end
    
      -- Parse json file and create record for cache
      local data = {}
      for line in fl:lines() do
        for key, regex in pairs(DOCKER_CONTAINER_METADATA) do
          local match = line:match(regex)
          if match then
            data[key] = match
          end
        end
      end
      fl:close()
    
      if next(data) == nil then
        return nil
      else
        return data
      end
    end
    
    function encrich_with_docker_metadata(tag, timestamp, record)
      -- Get container id from tag
      container_id = tag:match'.*%.(.*)'
      if not container_id then
        return 0, 0, 0
      end
    
      -- Add container_id to record
      new_record = record
      new_record['docker.container_id'] = container_id
    
      -- Check if we have fresh cache record for container
      local cached_data = cache[container_id]
      if cached_data == nil then
        cached_data = get_container_metadata_from_disk(container_id)
      end
    
      -- Metadata found in cache or got from disk, enrich record
      if cached_data then
        for key, regex in pairs(DOCKER_CONTAINER_METADATA) do
          new_record[key] = cached_data[key]
        end
      end
    
      return 1, timestamp, new_record
    end

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentbit-config
data:
  fluent-bit.conf: |
    [SERVICE]
    flush 1
    log_level error
  
    [INPUT]
    Name   tail
    Path   /var/lib/docker/containers/*/*.log
    Parser docker
    Refresh_Interval 30
    Ignore_Older 6h
    Docker_Mode  On
    Tag source.docker.<container_id>
    Tag_Regex (.*\/(?<container_id>.*)-json\.log)
    
    [FILTER]
    Name   lua
    Match  source.docker.*
    script /fluent-bit/bin/docker-metadata.lua
    call   encrich_with_docker_metadata
    
    [OUTPUT]
    Name                 opentelemetry
    Match                source.docker.*
    Host                 collector-service
    Port                 3030
    metrics_uri          /v1/metrics
    logs_uri             /v1/logs
    traces_uri           /v1/traces
    Log_response_payload True
    tls                  off
    tls.verify           off
    # add user-defined labels
    add_label            app fluent-bit
    add_label            color blue

---

apiVersion: v1
kind: Service
metadata:
  name: fluentbit-service
spec:
  selector:
    app: fluentbit
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001